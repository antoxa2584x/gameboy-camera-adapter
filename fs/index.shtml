<!DOCTYPE html>
<html lang="en">
  <head>
    <title>GameBoy Camera Adapter</title>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#cc3366">
	<meta charset="UTF-8" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="white">
    <meta name="apple-mobile-web-app-title" content="GameBoy Camera Adapter">
    <meta name="application-name" content="GameBoy Camera Adapter">
    <meta name="msapplication-TileColor" content="#ece6e6">
    <meta name="theme-color" content="#ece6e6">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <div id="content" class="container">
      <div id="header">
        <h1 id="title">GameBoy Camera Adapter</h1>
        <p id="description">Start printing on your Game Boy. When the LED stops blinking, press the "Get Images" button.</p>
        <button id="get_image_btn">Get Images</button>
        <button id="tear_btn">Tear</button>
        <button id="select_all_btn" disabled>Select All</button>
        <button id="delete_selected_btn" disabled>Delete</button>
        <button id="average_selected_btn" disabled>Average</button>
        <br>
      </div>
      <div id="gallery" style="display: flex;flex-wrap: wrap;justify-content: center;align-items: flex-start;"></div>
    </div>

    <footer>
      <p>GitHub Project: <a href="https://github.com/untoxa/pico-gb-printer" target="_blank">untoxa/pico-gb-printer</a></p>
      <p>Help: <a href="https://telegra.ph/GameBoy-Camera-Adapter-Instruction-06-25" target="_blank">GameBoy Camera Adapter Instructions</a></p>
      <div class="language-select">
        <label for="language_select">Language: </label>
        <select id="language_select">
          <option value="en">English</option>
          <option value="uk">Українська</option>
        </select>
      </div>
    </footer>
	
    <script>
      const translations = {
        en: {
          title: "GameBoy Camera Adapter",
          description: "Start printing on your Game Boy. When the transfering complete, press the \"Get Images\" button.",
          getImageBtn: "Get Images",
          tearBtn: "Tear",
          selectAllBtn: "Select All",
          deleteSelectedBtn: "Delete",
          averageSelectedBtn: "Average"
        },
        uk: {
          title: "Адаптер камери GameBoy",
          description: "Почніть друкувати на своєму Game Boy. Коли передача закінчиться, натисніть кнопку «Отримати зображення».",
          getImageBtn: "Отримати зображення",
          tearBtn: "Очистити",
          selectAllBtn: "Вибрати все",
          deleteSelectedBtn: "Видалити",
          averageSelectedBtn: "Середнє"
        }
      };

      document.getElementById('language_select').addEventListener('change', (event) => {
        const selectedLanguage = event.target.value;
        document.documentElement.lang = selectedLanguage;
        translatePage(selectedLanguage);
      });

      function translatePage(language) {
        document.getElementById('title').textContent = translations[language].title;
        document.getElementById('description').textContent = translations[language].description;
        document.getElementById('get_image_btn').textContent = translations[language].getImageBtn;
        document.getElementById('tear_btn').textContent = translations[language].tearBtn;
        document.getElementById('select_all_btn').textContent = translations[language].selectAllBtn;
        document.getElementById('delete_selected_btn').textContent = translations[language].deleteSelectedBtn;
        document.getElementById('average_selected_btn').textContent = translations[language].averageSelectedBtn;
      }

      // Initialize the page with the default language
      translatePage('en');
	  
      const COMMAND_INIT      = 0x01;
      const COMMAND_PRINT     = 0x02;
      const COMMAND_DATA      = 0x04;
      const COMMAND_TRANSFER  = 0x10;

      const PRINTER_WIDTH = 20;
      const CAMERA_WIDTH  = 16;
      const TILE_SIZE     = 0x10;
      const TILE_HEIGHT   = 8;
      const TILE_WIDTH    = 8;

      const imageBinPath  = "/download";
      const resetPath     = "/reset";

      let downloadIndex = 0;

//      const canvas = document.getElementById("canvas");
      const canvas = document.createElement('canvas');
      const getImageBtn = document.getElementById("get_image_btn");
      const gallery = document.getElementById("gallery");
      const tearBtn = document.getElementById("tear_btn");
      const deleteSelectedBtn = document.getElementById("delete_selected_btn");
      const selectAllBtn = document.getElementById("select_all_btn");
      const averageSelectedBtn = document.getElementById("average_selected_btn");

      Date.prototype.today = function (delim) {
          return ((this.getDate() < 10)?"0":"") + this.getDate() + delim + (((this.getMonth()+1) < 10)?"0":"") + (this.getMonth()+1) + delim + this.getFullYear();
      }
      Date.prototype.timeNow = function (delim) {
          return ((this.getHours() < 10)?"0":"") + this.getHours() + delim + ((this.getMinutes() < 10)?"0":"") + this.getMinutes() + delim + ((this.getSeconds() < 10)?"0":"") + this.getSeconds();
      }
      String.prototype.format = function() {
        var formatted = this;
        for (var i = 0; i < arguments.length; i++) {
          var regexp = new RegExp('\\{'+i+'\\}', 'gi');
          formatted = formatted.replace(regexp, arguments[i]);
        }
        return formatted;
      };

      function reset_canvas(canvas) {
        canvas.height = 1;
        canvas.width = 1;
      }
      function resize_canvas(canvas, new_w, new_h) {
        const ctx = canvas.getContext("2d");
        let temp = ctx.getImageData(0, 0, canvas.width, canvas.height)
        canvas.width = new_w;
        canvas.height = new_h;
        ctx.putImageData(temp, 0, 0);
      }

      function render(canvas, image_data, image_start, image_end, image_tile_width, sheets, margin, palette, exposure) {
        pal = new Uint8Array(4);
        pal[0] = ((exposure * ((palette >> 0) & 0x03)) / 3) >> 0;
        pal[1] = ((exposure * ((palette >> 2) & 0x03)) / 3) >> 0;
        pal[2] = ((exposure * ((palette >> 4) & 0x03)) / 3) >> 0;
        pal[3] = ((exposure * ((palette >> 6) & 0x03)) / 3) >> 0;

//        let tile_y = (((image_start / TILE_SIZE) >> 0) / image_tile_width) >> 0;
//        let tile_x = ((image_start / TILE_SIZE) >> 0) % image_tile_width;
        let tile_y = ((canvas.height / TILE_HEIGHT) >> 0);
        let tile_x = 0;

        resize_canvas(canvas, (image_tile_width * 8), ((canvas.height >> 3) << 3) + ((Math.max(0, image_end - image_start) / (TILE_SIZE * image_tile_width)) >> 0) * 8)

        const ctx = canvas.getContext("2d");
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const writeData = imageData.data;
        for (let i = image_start; i < image_end; ) {
          for (let t = 0; t < 8; t++) {
            let b1 = image_data[i++];
            let b2 = image_data[i++];
            for (let b = 0; b < 8; b++) {
              let offset = (((tile_y << 3) + t) * canvas.width + (tile_x << 3) + b) << 2;
              let color_index = ((b1 >> (7 - b)) & 1) | (((b2 >> (7 - b)) & 1) << 1);

              writeData[offset + 0] = writeData[offset + 1] = writeData[offset + 2] = 0xFF - pal[color_index];
              writeData[offset + 3] = 0xff;
            }
          }
          tile_x += 1;
          if (tile_x >= image_tile_width) {
            tile_x = 0;
            tile_y++;
          }
        }
        ctx.putImageData(imageData, 0, 0);

        return ((margin & 0x0f) != 0);
      }

      function decode(is_compressed, sour, sour_size, sour_data_len, sour_ptr, dest, dest_ptr) {
        if (sour_ptr + sour_data_len <= sour_size) {
          if (is_compressed) {
            const stop = sour_ptr + sour_data_len;
            while (sour_ptr < stop) {
              const tag = sour[sour_ptr++];
              if (tag & 0x80) {
                const data = sour[sour_ptr++];
                for (let i = 0; i < ((tag & 0x7f) + 2); i++) {
                  dest[dest_ptr++] = data;
                }
              } else {
                for (let i = 0; i < (tag + 1); i++) {
                  dest[dest_ptr++] = sour[sour_ptr++];
                }
              }
            }
            return dest_ptr;
          } else {
            for (let i = 0; i < sour_data_len; i++) {
              dest[dest_ptr++] = sour[sour_ptr++];
            }
            return dest_ptr;
          }
        }
        return dest_ptr;
      }

      async function get_camera_image(canvas, binPath) {
        const res = await fetch(imageBinPath);
        const resBody = await res.blob();
        const resBuf = await resBody.arrayBuffer();
        const resData = new Uint8Array(resBuf);
        const data_size = resBody.size;

        processed_data = new Uint8Array(Math.max(1024*1024, data_size));

        reset_canvas(canvas);

        let buffer_start = 0;
        let ptr = 0;
        let idx = 0;
        let len = 0;
        while (idx < data_size) {
          const command = resData[idx++];
          switch(command) {
            case COMMAND_INIT:
              break;
            case COMMAND_PRINT:
              if ((len = resData[idx++] | (resData[idx++] << 8)) != 4) {
                idx = data_size;
                break;
              }
              let sheets = resData[idx++];
              let margins = resData[idx++];
              let palette = resData[idx++];
              let exposure = Math.min(0xFF, 0x80 + resData[idx++]);

              palette = (palette) ? palette : 0xE4;

              if (render(canvas, processed_data, buffer_start, ptr, PRINTER_WIDTH, sheets, margins, palette, exposure)) {
                addCanvasToGallery(canvas);
                reset_canvas(canvas);
              }
              buffer_start = ptr;

              break;
            case COMMAND_TRANSFER: {
              len = resData[idx++] | (resData[idx++] << 8);
              let current_image_start = ptr;
              ptr = decode(false, resData, data_size, len, idx, processed_data, ptr);
              idx += len;
              render(canvas, processed_data, current_image_start, ptr, CAMERA_WIDTH, 1, 0x03, 0xE4, 0xFF);
              addCanvasToGallery(canvas);
              reset_canvas(canvas);
              buffer_start = ptr;
              break;
            }
            case COMMAND_DATA: {
              const compression = resData[idx++];
              len = resData[idx++] | (resData[idx++] << 8);
              ptr = decode(compression, resData, data_size, len, idx, processed_data, ptr);
              idx += len;
              break;
            }
            default:
              idx = data_size;
              break;
          }
        }
        if (canvas.height > 1) {
          addCanvasToGallery(canvas);
          reset_canvas(canvas);
        }
      }

      function addCanvasToGallery(canvas) {
        if (canvas.height > 1) {
          const div = document.createElement("div");
          div.classList.add("gallery-image");

          const img = new Image();
          img.src = canvas.toDataURL();
          div.appendChild(img);
          div.appendChild(document.createElement("br"));
          div.markedForAction = false;

          const input = document.createElement("input");
          input.setAttribute("type", "checkbox");
          input.addEventListener("change", function() {
            deleteSelectedBtn.disabled = !(div.markedForAction = (input.checked));
            averageSelectedBtn.disabled = !(div.markedForAction = (input.checked));
            if  (!deleteSelectedBtn.disabled) return;
            var items = gallery.children;
            selectAllBtn.disabled = (items.length == 0);
            for (var i = 0; i < items.length; i++) {
              if (!(deleteSelectedBtn.disabled = !(items[i].markedForAction))) break;
            }
            for (var i = 0; i < items.length; i++) {
              if (!(averageSelectedBtn.disabled = !(items[i].markedForAction))) break;
            }
          });
          div.appendChild(input);

          const btn = document.createElement("button");
          btn.textContent = "Save";
          btn.addEventListener("click", function () {
            downloadImage(img);
          });
          div.appendChild(btn);

          gallery.appendChild(div);
          selectAllBtn.disabled = false;
        }
      }

      async function downloadImage(image) {
        downloadIndex += 1;
        var datetime = new Date();
        file_name = "image_{0}_{1}.png".format(datetime.today("-"), datetime.timeNow("-"));
        // Fallback to simple download
        const xhr = new XMLHttpRequest();
        xhr.responseType = "blob";
        xhr.onload = function () {
          const a = document.createElement("a");
          a.href = window.URL.createObjectURL(xhr.response);
          a.download = file_name;
          a.style.display = "none";
          document.body.appendChild(a);
          a.click();
          a.remove();
        };
        xhr.open("GET", image.src);
        xhr.send();
      }

      getImageBtn.addEventListener("click", async function () {
        await get_camera_image(canvas, imageBinPath);
      });

      selectAllBtn.addEventListener("click", function () {
        var items = gallery.children;
        if (items.length != 0) {
          Array.from(items).forEach(item => {
            Array.from(item.getElementsByTagName("INPUT")).forEach(element => element.checked=true);
            item.markedForAction = true;
          });
          deleteSelectedBtn.disabled = false;
          averageSelectedBtn.disabled = false;
        } else {
          deleteSelectedBtn.disabled = true;
          averageSelectedBtn.disabled = false;
        }
      });

      deleteSelectedBtn.addEventListener("click", function () {
        var items = gallery.children;
        for (var i = items.length - 1; i >= 0; i--) {
          if (items[i].markedForAction) items[i].remove();
        }
        deleteSelectedBtn.disabled = true;
        selectAllBtn.disabled = (items.length == 0);
      });

      tearBtn.addEventListener("click", async function () {
        fetch(resetPath)
          .then((response) => {
            return response.json();
          })
          .then((data) => {
            if (data.result != "ok") return;
            getImageBtn.click();
          });
      });

      averageSelectedBtn.addEventListener("click", function() {
        const items = gallery.children;

        const avgCanvas = document.createElement('canvas');
        const avgCtx = avgCanvas.getContext('2d');
        
        const tmpCanvas = document.createElement('canvas');
        const tmpCtx = tmpCanvas.getContext('2d');
        
        // Verify that image dimensions are the same
        const firstImg = items[0].querySelector("img");
        const tmpW = firstImg.width;
        const tmpH = firstImg.height;
        for (let i = 1; i < items.length; i++) {
          const img = items[i].querySelector("img");
          if (tmpW != img.width || tmpH != img.height) {
            alert("Image dimensions should be the same to do an average");
            return;
          } 
        }
        
        tmpCanvas.width = tmpW;
        tmpCanvas.height = tmpH;

        avgCanvas.width = tmpW;
        avgCanvas.height = tmpH;

        const sumImgData = [];
        const avgImgData = avgCtx.createImageData(avgCanvas.width, avgCanvas.height);
        let selectedItems = 0;
        // Generate average image
        for (let i = items.length - 1; i >= 0; i--) {
          if (items[i].markedForAction) {
            selectedItems++;
            const item = items[i];
            const img = item.querySelector("img");
            tmpCtx.drawImage(img,0,0);
            const tmpImgData = tmpCtx.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height);
            for (let j = 0; j < tmpImgData.data.length; j += 1) {
              if (!sumImgData[j]) {
                sumImgData.push(0);
              }
              sumImgData[j] += tmpImgData.data[j];
            }
          }
        }
        for (let i = 0; i < avgImgData.data.length; i += 1) {
          avgImgData.data[i] = (sumImgData[i] / selectedItems);
        }
        avgCtx.putImageData(avgImgData, 0, 0);
        addCanvasToGallery(avgCanvas);
    });
	</script>
  </body>
</html>